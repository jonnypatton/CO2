import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.dates import DateFormatter

# Function to replace NaN with the average of previous and next valid values
def fill_with_avg_before_after(series):
    # Create a copy of the Series to avoid SettingWithCopyWarning
    series = series.copy()
    for i in range(len(series)):
        if pd.isna(series[i]):  # Check if the value is NaN
            # Find the previous valid value
            prev_valid = series[:i].last_valid_index()
            # Find the next valid value
            next_valid = series[i:].first_valid_index()
            
            if prev_valid is not None and next_valid is not None:
                # Average of previous and next valid values
                series[i] = (series[prev_valid] + series[next_valid]) / 2
            elif prev_valid is not None:
                # Fill with the previous valid value
                series[i] = series[prev_valid]
            elif next_valid is not None:
                # Fill with the next valid value
                series[i] = series[next_valid]
    return series

# Reload the data
df = pd.read_csv('history.csv')

# Convert 'last_changed' to datetime
df['last_changed'] = pd.to_datetime(df['last_changed'], errors='coerce')

# Convert 'state' to numeric, coercing text (e.g., "unavailable", "unknown") to NaN
df['state'] = pd.to_numeric(df['state'], errors='coerce')

# Sort by time (if not already sorted)
df = df.sort_values(by='last_changed')

# Fill NaN values (e.g., "unavailable", "unknown") with the average of previous and next valid values
df['state'] = fill_with_avg_before_after(df['state'])

# Drop any remaining NaN values (if any)
df = df.dropna()

# Filter out values over 1500 (if needed)
# df = df[df['state'] <= 1500]

# Calculate the 15-point EMA
df['15_point_ema'] = df['state'].ewm(span=15, adjust=False).mean()

# Create the plot with hourly vertical lines
plt.figure(figsize=(12, 6))

# Light blue for CO2 levels line
sns.lineplot(data=df, x='last_changed', y='state', label='CO2 Levels', color='lightblue')

# Dark blue for 15-point EMA line
sns.lineplot(data=df, x='last_changed', y='15_point_ema', label='15-Point EMA', color='darkblue')

# Add hourly vertical lines
for hour in pd.date_range(start=df['last_changed'].min().floor('h'), 
                          end=df['last_changed'].max().ceil('h'), freq='h'):
    plt.axvline(x=hour, color='gray', linestyle='--', alpha=0.5)

# Format x-axis
plt.gca().xaxis.set_major_formatter(DateFormatter('%H:%M'))

plt.title('CO2 Levels Hourly')
plt.xlabel('Time (HH:MM)')
plt.ylabel('CO2 Level (ppm)')
plt.xticks(rotation=45)
plt.grid(True, alpha=0.3)
plt.legend()
plt.tight_layout()
plt.show()
